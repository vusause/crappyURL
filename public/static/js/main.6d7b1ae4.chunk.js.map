{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","submitURL","bind","state","original_url","redirect_url","console","log","process","options","body","JSON","stringify","url","this","headers","method","fetch","then","response","json","error","setState","payload","catch","err","className","href","type","onChange","e","target","value","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAmDeA,G,kBA7Cd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,MAAQ,CACZC,aAAc,GACdC,aAAc,IALG,E,yEASN,IAAD,OACXC,QAAQC,IAbUC,0BAclB,IAAMC,EAAU,CACfC,KAAMC,KAAKC,UAAU,CAAEC,IAAKC,KAAKX,MAAMC,eACvCW,QAAS,CAAC,eAAgB,oBAC1BC,OAAQ,QAGT,OAAOC,MApBWT,yBAoBQC,GACxBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxB,SAAAC,GAAK,OAAIf,QAAQC,IAAI,qBAAsBc,MAC7CH,MAAK,SAACC,GACNb,QAAQC,IAAIY,GACZ,EAAKG,SAAS,CAAEjB,aAAcc,EAASI,aACrCC,OAAM,SAACC,GACTnB,QAAQe,MAAMI,Q,+BAIP,IAAD,OACR,OACC,yBAAKC,UAAU,OACd,wBAAIA,UAAU,aAAd,kBACA,2BAAG,uBAAGC,KAAK,wBAAR,WAAH,cACA,uBAAGD,UAAU,aACZ,2BAAOE,KAAK,OAAOF,UAAU,WAAWG,SAAW,SAACC,GAAQ,EAAKR,SAAS,CAAElB,aAAc0B,EAAEC,OAAOC,SAAcC,YAAY,wBAC7H,4BAAQP,UAAU,YAAYQ,QAAS,kBAAM,EAAKjC,cAAlD,eAID,uBAAG0B,KAAI,UAAKb,KAAKX,MAAME,eAAiBS,KAAKX,MAAME,mB,GAxCrC8B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.6d7b1ae4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst server_addr = process.env.REACT_APP_SERVER_ADDR;\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.submitURL = this.submitURL.bind(this);\n\t\tthis.state = {\n\t\t\toriginal_url: '',\n\t\t\tredirect_url: '',\n\t\t};\n\t}\n\n\tsubmitURL() {\n\t\tconsole.log(server_addr);\n\t\tconst options = {\n\t\t\tbody: JSON.stringify({ url: this.state.original_url }),\n\t\t\theaders: {'content-type': 'application/json'},\n\t\t\tmethod: 'POST',\n\t\t}\n\n\t\treturn fetch(server_addr, options)\n\t\t\t.then(response => response.json(),\n\t\t\t\t  error => console.log('An error occurred.', error))\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tthis.setState({ redirect_url: response.payload });\n\t\t\t}).catch((err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"App-title\">URL Redirector</h1>\n\t\t\t\t<p><a href='https://tinyurl.com/'>tinyurl</a> but worse</p>\n\t\t\t\t<p className=\"App-intro\">\n\t\t\t\t\t<input type=\"text\" className=\"inputURL\" onChange={ (e) => { this.setState({ original_url: e.target.value }); } } placeholder=\"https://example.com\" />\n\t\t\t\t\t<button className=\"submitURL\" onClick={() => this.submitURL()}>\n\t\t\t\t\t\tSubmit URL\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t\t<a href={`${this.state.redirect_url}`}>{this.state.redirect_url}</a>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}